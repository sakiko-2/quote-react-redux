{"version":3,"sources":["reducers/index.js","reducers/quote.js","actions/index.js","App.js","serviceWorker.js","index.js"],"names":["combineReducers","loading","state","arguments","length","undefined","action","type","data","PROXY_URL","library","add","faRedo","faSpinner","faQuoteLeft","App","this","props","fetchData","react_default","a","createElement","className","react_fontawesome_index_es","icon","pulse","size","color","quote","onClick","handleClickReload","bind","thoughtAuthor","name","renderQuote","Component","connect","dispatch","url","num","Math","floor","random","REQUEST_URL","concat","fetch","then","response","json","responseData","thought","catch","error","console","log","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62804e22.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { loading, data } from './quote';\n\nexport default combineReducers({\n  loading,\n  data\n});\n","export function loading(state = true, action) {\n  switch (action.type) {\n    case 'LOADING':\n      return action.loading;\n    default:\n      return state;\n  }\n};\n\nexport function data(state = [], action) {\n  switch (action.type) {\n    case 'FETCH_SUCCESS':\n      return action.data;\n    default:\n      return state;\n  }\n};\n","const PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\n\nexport function loading(bool) {\n  return {\n    type: 'LOADING',\n    loading: bool\n  };\n};\n\nexport function fetchSuccess(data) {\n  return {\n    type: 'FETCH_SUCCESS',\n    data\n  };\n};\n\nexport function fetchData(url) {\n  return (dispatch) => {\n    const num = Math.floor((Math.random() * 1000) + 1);\n    const REQUEST_URL = `https://www.forbes.com/forbesapi/thought/uri.json?enrich=true&query=${num}&relatedlimit=1`;\n\n    fetch(PROXY_URL + REQUEST_URL)\n      .then((response) => response.json())\n      .then((responseData) => {\n        dispatch(fetchSuccess(responseData.thought));\n        dispatch(loading(false));\n      })\n      .catch((error) => console.log('Error:', error));\n  };\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchData } from './actions/index';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faRedo, faSpinner, faQuoteLeft } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faRedo, faSpinner, faQuoteLeft);\n\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchData();\n  }\n\n  handleClickReload() {\n    this.props.fetchData();\n  }\n\n  renderQuote() {\n    if (this.props.loading || !this.props.data) {\n      return (\n        <div className='m-3'>\n          <FontAwesomeIcon icon='spinner' pulse size='2x' color='lightgrey' />\n        </div>\n      );\n    }\n\n    return (\n      <div className='blockquote mx-4 my-3'>\n        <div className='text-left'>\n          <div><FontAwesomeIcon icon='quote-left' /></div>\n          {this.props.data.quote}\n        </div>\n        <div className='d-flex justify-content-between mt-4'>\n          <button\n            className='btn btn-dark m-1 rounded-circle text-left'\n            onClick={this.handleClickReload.bind(this)}\n          >\n            <FontAwesomeIcon icon='redo' />\n          </button>\n          <div className='blockquote-footer mt-2 text-right'>{this.props.data.thoughtAuthor.name}</div>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className='App'>\n        <div className='container'>\n          <header className='App-header'>\n            <h1>Quote Of The Day</h1>\n          </header>\n          <div className='d-flex flex-row justify-content-center'>\n            <div className='bg-white card'>\n              <div className='card-body'>\n                {this.renderQuote()}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.data,\n    loading: state.loading\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    fetchData: (url) => dispatch(fetchData(url))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}